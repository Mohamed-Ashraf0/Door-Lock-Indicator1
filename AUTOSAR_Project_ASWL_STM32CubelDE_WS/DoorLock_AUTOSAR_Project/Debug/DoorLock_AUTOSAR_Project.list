
DoorLock_AUTOSAR_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b44  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000c74  08000c74  00001c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c7c  08000c7c  00001c84  2**0
                  CONTENTS
  4 .ARM          00000000  08000c7c  08000c7c  00001c84  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c7c  08000c84  00001c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c7c  08000c7c  00001c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c80  08000c80  00001c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000000  08000c84  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08000c84  000020b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002daa  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ee2  00000000  00000000  00004a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000014f4  00000000  00000000  00005939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000358  00000000  00000000  00006e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002a0  00000000  00000000  00007188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043df  00000000  00000000  00007428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005c48  00000000  00000000  0000b807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000decf  00000000  00000000  0001144f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001f31e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a98  00000000  00000000  0001f364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c5c 	.word	0x08000c5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c5c 	.word	0x08000c5c

08000170 <DoorLook_Indecation_runable>:

#include "RTE_gen/Rte_DoorLock_indecation_SWC.h"
#define LEDON 0
#define LEDOFF 1
void DoorLook_Indecation_runable(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	unsigned char Doorstate=0;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
	Doorstate=Rte_IRead_DoorLock_indecation_SWC_Door_Look_Indication_RP_SR_DoorState_DoorState();
 800017a:	f000 f867 	bl	800024c <Rte_IRead_DoorLock_indecation_SWC_Door_Look_Indication_RP_SR_DoorState_DoorState>
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]

	if(Doorstate)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d003      	beq.n	8000190 <DoorLook_Indecation_runable+0x20>
	{

		Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch(LEDON);
 8000188:	2000      	movs	r0, #0
 800018a:	f000 f86b 	bl	8000264 <Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch>
	else
	{

		Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch(LEDOFF);
	}
}
 800018e:	e002      	b.n	8000196 <DoorLook_Indecation_runable+0x26>
		Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch(LEDOFF);
 8000190:	2001      	movs	r0, #1
 8000192:	f000 f867 	bl	8000264 <Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch>
}
 8000196:	bf00      	nop
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <Led_Switch>:
#include "MCAL/DIO.h"
#define LEDON 0
#define LEDOFF 1

Std_ReturnType Led_Switch(myuint8 Led_State)
{
 800019e:	b580      	push	{r7, lr}
 80001a0:	b082      	sub	sp, #8
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	4603      	mov	r3, r0
 80001a6:	71fb      	strb	r3, [r7, #7]
	if(Led_State==LEDON)
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d105      	bne.n	80001ba <Led_Switch+0x1c>
	{
		Dio_Writechhannel(DIO_Led, LEDON);
 80001ae:	2100      	movs	r1, #0
 80001b0:	2080      	movs	r0, #128	@ 0x80
 80001b2:	f000 f835 	bl	8000220 <Dio_Writechhannel>
		return RTE_E_IF_CS_Led_E_OK;
 80001b6:	2300      	movs	r3, #0
 80001b8:	e009      	b.n	80001ce <Led_Switch+0x30>
	}
	else if(Led_State==LEDOFF)
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d105      	bne.n	80001cc <Led_Switch+0x2e>
	{
		Dio_Writechhannel(DIO_Led, LEDOFF);
 80001c0:	2101      	movs	r1, #1
 80001c2:	2080      	movs	r0, #128	@ 0x80
 80001c4:	f000 f82c 	bl	8000220 <Dio_Writechhannel>
		return RTE_E_IF_CS_Led_E_OK;
 80001c8:	2300      	movs	r3, #0
 80001ca:	e000      	b.n	80001ce <Led_Switch+0x30>
	}
	else
	{
		return RTE_E_IF_CS_Led_E_NOT_OK;
 80001cc:	2301      	movs	r3, #1
	}

}
 80001ce:	4618      	mov	r0, r3
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <ReadDoorSensor_Runable>:



void ReadDoorSensor_Runable(void)
{
 80001d6:	b580      	push	{r7, lr}
 80001d8:	b082      	sub	sp, #8
 80001da:	af00      	add	r7, sp, #0
	uint8 Doorstate=0;
 80001dc:	2300      	movs	r3, #0
 80001de:	71fb      	strb	r3, [r7, #7]
	Doorstate=Dio_Readchhannel(DIO_Door);
 80001e0:	2008      	movs	r0, #8
 80001e2:	f000 f80b 	bl	80001fc <Dio_Readchhannel>
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_PP_SR_DoorState(Doorstate);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f859 	bl	80002a4 <Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_PP_SR_DoorState>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <Dio_Readchhannel>:
 */

#include "DIO.h"

unsigned char Dio_Readchhannel (unsigned char ID)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]

	return(MCAL_GPIO_ReadPin(GPIO_Port_Used, ID));
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	b29b      	uxth	r3, r3
 800020a:	4619      	mov	r1, r3
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <Dio_Readchhannel+0x20>)
 800020e:	f000 fa50 	bl	80006b2 <MCAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0

}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40010800 	.word	0x40010800

08000220 <Dio_Writechhannel>:
void Dio_Writechhannel (unsigned char ID,unsigned char Level)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	460a      	mov	r2, r1
 800022a:	71fb      	strb	r3, [r7, #7]
 800022c:	4613      	mov	r3, r2
 800022e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_WritePin(GPIO_Port_Used, ID, Level);
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	b29b      	uxth	r3, r3
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	4619      	mov	r1, r3
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <Dio_Writechhannel+0x28>)
 800023a:	f000 fa51 	bl	80006e0 <MCAL_GPIO_WritePin>

}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800

0800024c <Rte_IRead_DoorLock_indecation_SWC_Door_Look_Indication_RP_SR_DoorState_DoorState>:
Std_ReturnType DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch_Buffer_retcode = RTE_E_OK;

FunctionPtr_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch_Delegate = 0;

myuint8 Rte_IRead_DoorLock_indecation_SWC_Door_Look_Indication_RP_SR_DoorState_DoorState (void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	return (Rte_Inst_DoorLock_indecation_SWC)->Door_Look_Indication_RP_SR_DoorState_DoorState->value;
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <Rte_IRead_DoorLock_indecation_SWC_Door_Look_Indication_RP_SR_DoorState_DoorState+0x14>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	781b      	ldrb	r3, [r3, #0]
}
 8000256:	4618      	mov	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	08000c74 	.word	0x08000c74

08000264 <Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch>:
Std_ReturnType Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch (myuint8 Led_State)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType __result = DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch_Buffer_retcode;
 800026e:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch+0x38>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch_Delegate != 0 ) {
 8000274:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch+0x3c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d006      	beq.n	800028a <Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch+0x26>
		__result = Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch_Delegate(Led_State);
 800027c:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <Rte_Call_DoorLock_indecation_SWC_RP_CS_Led_Switch_Led_Switch+0x3c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	4610      	mov	r0, r2
 8000284:	4798      	blx	r3
 8000286:	4603      	mov	r3, r0
 8000288:	73fb      	strb	r3, [r7, #15]
	}
	Led_Switch(Led_State);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ff86 	bl	800019e <Led_Switch>
	return __result;
 8000292:	7bfb      	ldrb	r3, [r7, #15]
}
 8000294:	4618      	mov	r0, r3
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000001d 	.word	0x2000001d
 80002a0:	20000020 	.word	0x20000020

080002a4 <Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_PP_SR_DoorState>:




void Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_PP_SR_DoorState (myuint8 DoorState)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_DoorSensorAbstractionSWC)->ReadDoorSensor_PP_SR_DoorState->value = DoorState;
 80002ae:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_PP_SR_DoorState+0x1c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	701a      	strb	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	08000c78 	.word	0x08000c78

080002c4 <wait_cycles>:




#define CYCLES_PER_LOOP 3
void wait_cycles( uint32_t n ) {
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	uint32_t l = n/CYCLES_PER_LOOP;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a07      	ldr	r2, [pc, #28]	@ (80002ec <wait_cycles+0x28>)
 80002d0:	fba2 2303 	umull	r2, r3, r2, r3
 80002d4:	085b      	lsrs	r3, r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
	asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3b01      	subs	r3, #1
 80002dc:	d1fd      	bne.n	80002da <wait_cycles+0x16>
 80002de:	60fb      	str	r3, [r7, #12]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	aaaaaaab 	.word	0xaaaaaaab

080002f0 <MCU_init>:


void MCU_init () {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0

	//==================GPIO INIT =============================

	//Enable CLock
	RCC_GPIOA_CLK_EN();
 80002f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <MCU_init+0x44>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000334 <MCU_init+0x44>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6193      	str	r3, [r2, #24]

	//PA3 ---> Door Sensor
	GPIO_PinConfig_t PinCfg_Door_Sensor ;

	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_3;
 8000302:	2308      	movs	r3, #8
 8000304:	80bb      	strh	r3, [r7, #4]
	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000306:	2301      	movs	r3, #1
 8000308:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	480a      	ldr	r0, [pc, #40]	@ (8000338 <MCU_init+0x48>)
 8000310:	f000 f924 	bl	800055c <MCAL_GPIO_Init>

	//PA7 ---> Led On/OFF

	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_7;
 8000314:	2380      	movs	r3, #128	@ 0x80
 8000316:	80bb      	strh	r3, [r7, #4]
	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000318:	2304      	movs	r3, #4
 800031a:	71bb      	strb	r3, [r7, #6]
	PinCfg_Door_Sensor.GPIO_Output_Speed = GPIO_SPEED_10M;
 800031c:	2301      	movs	r3, #1
 800031e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4619      	mov	r1, r3
 8000324:	4804      	ldr	r0, [pc, #16]	@ (8000338 <MCU_init+0x48>)
 8000326:	f000 f919 	bl	800055c <MCAL_GPIO_Init>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	40010800 	.word	0x40010800

0800033c <StartOS>:
void StartOS ()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	unsigned char i = 0 ;
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
	//it is just a prodic sequence fast implementation
	//as we will focus on implement OS and used accurate time based on the timer later on AUTOSAR OS unit
	//But nw we focused only on APPLICATion Layer
	while (1)
	{
		if (i==10)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b0a      	cmp	r3, #10
 800034a:	d105      	bne.n	8000358 <StartOS+0x1c>
		{
			//memec RTE_Event_10ms
			ReadDoorSensor_Runable();
 800034c:	f7ff ff43 	bl	80001d6 <ReadDoorSensor_Runable>
			i++ ;
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	3301      	adds	r3, #1
 8000354:	71fb      	strb	r3, [r7, #7]
 8000356:	e00a      	b.n	800036e <StartOS+0x32>
		}else if (i==12)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	2b0c      	cmp	r3, #12
 800035c:	d104      	bne.n	8000368 <StartOS+0x2c>
		{
			//memec RTE_Event_12ms
			DoorLook_Indecation_runable();
 800035e:	f7ff ff07 	bl	8000170 <DoorLook_Indecation_runable>
			i=0 ;
 8000362:	2300      	movs	r3, #0
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	e002      	b.n	800036e <StartOS+0x32>
		}else
		{
			i++ ;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	3301      	adds	r3, #1
 800036c:	71fb      	strb	r3, [r7, #7]
		}
		wait_cycles(10);
 800036e:	200a      	movs	r0, #10
 8000370:	f7ff ffa8 	bl	80002c4 <wait_cycles>
		if (i==10)
 8000374:	e7e7      	b.n	8000346 <StartOS+0xa>
	...

08000378 <main>:
	}

}

int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	MCU_init();
 800037c:	f7ff ffb8 	bl	80002f0 <MCU_init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	2180      	movs	r1, #128	@ 0x80
 8000384:	4803      	ldr	r0, [pc, #12]	@ (8000394 <main+0x1c>)
 8000386:	f000 f9ab 	bl	80006e0 <MCAL_GPIO_WritePin>
	StartOS();
 800038a:	f7ff ffd7 	bl	800033c <StartOS>

	/* Loop forever */
	while(1)
 800038e:	bf00      	nop
 8000390:	e7fd      	b.n	800038e <main+0x16>
 8000392:	bf00      	nop
 8000394:	40010800 	.word	0x40010800

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	@ (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800039c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	@ (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	@ (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 fc25 	bl	8000c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ffd5 	bl	8000378 <main>

080003ce <LoopForever>:

LoopForever:
    b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003dc:	08000c84 	.word	0x08000c84
  ldr r2, =_sbss
 80003e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e4:	200000b4 	.word	0x200000b4

080003e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC1_2_IRQHandler>
	...

080003ec <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80003f6:	88fb      	ldrh	r3, [r7, #6]
 80003f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80003fc:	f000 80a5 	beq.w	800054a <Get_CRLH_Position+0x15e>
 8000400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000404:	f300 80a3 	bgt.w	800054e <Get_CRLH_Position+0x162>
 8000408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800040c:	f000 809b 	beq.w	8000546 <Get_CRLH_Position+0x15a>
 8000410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000414:	f300 809b 	bgt.w	800054e <Get_CRLH_Position+0x162>
 8000418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800041c:	f000 8091 	beq.w	8000542 <Get_CRLH_Position+0x156>
 8000420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000424:	f300 8093 	bgt.w	800054e <Get_CRLH_Position+0x162>
 8000428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800042c:	f000 8087 	beq.w	800053e <Get_CRLH_Position+0x152>
 8000430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000434:	f300 808b 	bgt.w	800054e <Get_CRLH_Position+0x162>
 8000438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800043c:	d07d      	beq.n	800053a <Get_CRLH_Position+0x14e>
 800043e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000442:	f300 8084 	bgt.w	800054e <Get_CRLH_Position+0x162>
 8000446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800044a:	d074      	beq.n	8000536 <Get_CRLH_Position+0x14a>
 800044c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000450:	dc7d      	bgt.n	800054e <Get_CRLH_Position+0x162>
 8000452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000456:	d06c      	beq.n	8000532 <Get_CRLH_Position+0x146>
 8000458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800045c:	dc77      	bgt.n	800054e <Get_CRLH_Position+0x162>
 800045e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000462:	d064      	beq.n	800052e <Get_CRLH_Position+0x142>
 8000464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000468:	dc71      	bgt.n	800054e <Get_CRLH_Position+0x162>
 800046a:	2b80      	cmp	r3, #128	@ 0x80
 800046c:	d05d      	beq.n	800052a <Get_CRLH_Position+0x13e>
 800046e:	2b80      	cmp	r3, #128	@ 0x80
 8000470:	dc6d      	bgt.n	800054e <Get_CRLH_Position+0x162>
 8000472:	2b20      	cmp	r3, #32
 8000474:	dc48      	bgt.n	8000508 <Get_CRLH_Position+0x11c>
 8000476:	2b00      	cmp	r3, #0
 8000478:	dd69      	ble.n	800054e <Get_CRLH_Position+0x162>
 800047a:	3b01      	subs	r3, #1
 800047c:	2b1f      	cmp	r3, #31
 800047e:	d866      	bhi.n	800054e <Get_CRLH_Position+0x162>
 8000480:	a201      	add	r2, pc, #4	@ (adr r2, 8000488 <Get_CRLH_Position+0x9c>)
 8000482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000486:	bf00      	nop
 8000488:	0800050f 	.word	0x0800050f
 800048c:	08000513 	.word	0x08000513
 8000490:	0800054f 	.word	0x0800054f
 8000494:	08000517 	.word	0x08000517
 8000498:	0800054f 	.word	0x0800054f
 800049c:	0800054f 	.word	0x0800054f
 80004a0:	0800054f 	.word	0x0800054f
 80004a4:	0800051b 	.word	0x0800051b
 80004a8:	0800054f 	.word	0x0800054f
 80004ac:	0800054f 	.word	0x0800054f
 80004b0:	0800054f 	.word	0x0800054f
 80004b4:	0800054f 	.word	0x0800054f
 80004b8:	0800054f 	.word	0x0800054f
 80004bc:	0800054f 	.word	0x0800054f
 80004c0:	0800054f 	.word	0x0800054f
 80004c4:	0800051f 	.word	0x0800051f
 80004c8:	0800054f 	.word	0x0800054f
 80004cc:	0800054f 	.word	0x0800054f
 80004d0:	0800054f 	.word	0x0800054f
 80004d4:	0800054f 	.word	0x0800054f
 80004d8:	0800054f 	.word	0x0800054f
 80004dc:	0800054f 	.word	0x0800054f
 80004e0:	0800054f 	.word	0x0800054f
 80004e4:	0800054f 	.word	0x0800054f
 80004e8:	0800054f 	.word	0x0800054f
 80004ec:	0800054f 	.word	0x0800054f
 80004f0:	0800054f 	.word	0x0800054f
 80004f4:	0800054f 	.word	0x0800054f
 80004f8:	0800054f 	.word	0x0800054f
 80004fc:	0800054f 	.word	0x0800054f
 8000500:	0800054f 	.word	0x0800054f
 8000504:	08000523 	.word	0x08000523
 8000508:	2b40      	cmp	r3, #64	@ 0x40
 800050a:	d00c      	beq.n	8000526 <Get_CRLH_Position+0x13a>
 800050c:	e01f      	b.n	800054e <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0 ;
 800050e:	2300      	movs	r3, #0
 8000510:	e01e      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000512:	2304      	movs	r3, #4
 8000514:	e01c      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000516:	2308      	movs	r3, #8
 8000518:	e01a      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 800051a:	230c      	movs	r3, #12
 800051c:	e018      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800051e:	2310      	movs	r3, #16
 8000520:	e016      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8000522:	2314      	movs	r3, #20
 8000524:	e014      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000526:	2318      	movs	r3, #24
 8000528:	e012      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 800052a:	231c      	movs	r3, #28
 800052c:	e010      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 800052e:	2300      	movs	r3, #0
 8000530:	e00e      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8000532:	2304      	movs	r3, #4
 8000534:	e00c      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000536:	2308      	movs	r3, #8
 8000538:	e00a      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 800053a:	230c      	movs	r3, #12
 800053c:	e008      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800053e:	2310      	movs	r3, #16
 8000540:	e006      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000542:	2314      	movs	r3, #20
 8000544:	e004      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000546:	2318      	movs	r3, #24
 8000548:	e002      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 800054a:	231c      	movs	r3, #28
 800054c:	e000      	b.n	8000550 <Get_CRLH_Position+0x164>
		break ;


	}
return 0 ;
 800054e:	2300      	movs	r3, #0

}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 800056a:	2300      	movs	r3, #0
 800056c:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2bff      	cmp	r3, #255	@ 0xff
 8000574:	d801      	bhi.n	800057a <MCAL_GPIO_Init+0x1e>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	e001      	b.n	800057e <MCAL_GPIO_Init+0x22>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3304      	adds	r3, #4
 800057e:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff31 	bl	80003ec <Get_CRLH_Position>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	230f      	movs	r3, #15
 8000590:	4093      	lsls	r3, r2
 8000592:	43da      	mvns	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	401a      	ands	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	789b      	ldrb	r3, [r3, #2]
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d00b      	beq.n	80005be <MCAL_GPIO_Init+0x62>
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	2b05      	cmp	r3, #5
 80005ac:	d007      	beq.n	80005be <MCAL_GPIO_Init+0x62>
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	d003      	beq.n	80005be <MCAL_GPIO_Init+0x62>
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	2b06      	cmp	r3, #6
 80005bc:	d11d      	bne.n	80005fa <MCAL_GPIO_Init+0x9e>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	3b04      	subs	r3, #4
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	b25a      	sxtb	r2, r3
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	78db      	ldrb	r3, [r3, #3]
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 030f 	and.w	r3, r3, #15
 80005da:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80005dc:	7afc      	ldrb	r4, [r7, #11]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff02 	bl	80003ec <Get_CRLH_Position>
 80005e8:	4603      	mov	r3, r0
 80005ea:	fa04 f203 	lsl.w	r2, r4, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	431a      	orrs	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	e057      	b.n	80006aa <MCAL_GPIO_Init+0x14e>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <MCAL_GPIO_Init+0xae>
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d115      	bne.n	8000636 <MCAL_GPIO_Init+0xda>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	789b      	ldrb	r3, [r3, #2]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000618:	7afc      	ldrb	r4, [r7, #11]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fee4 	bl	80003ec <Get_CRLH_Position>
 8000624:	4603      	mov	r3, r0
 8000626:	fa04 f203 	lsl.w	r2, r4, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	431a      	orrs	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	e039      	b.n	80006aa <MCAL_GPIO_Init+0x14e>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	2b08      	cmp	r3, #8
 800063c:	d110      	bne.n	8000660 <MCAL_GPIO_Init+0x104>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 800063e:	2304      	movs	r3, #4
 8000640:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000642:	7afc      	ldrb	r4, [r7, #11]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fecf 	bl	80003ec <Get_CRLH_Position>
 800064e:	4603      	mov	r3, r0
 8000650:	fa04 f203 	lsl.w	r2, r4, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	431a      	orrs	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 800065e:	e024      	b.n	80006aa <MCAL_GPIO_Init+0x14e>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 8000660:	2308      	movs	r3, #8
 8000662:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000664:	7afc      	ldrb	r4, [r7, #11]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff febe 	bl	80003ec <Get_CRLH_Position>
 8000670:	4603      	mov	r3, r0
 8000672:	fa04 f203 	lsl.w	r2, r4, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	431a      	orrs	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	789b      	ldrb	r3, [r3, #2]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d107      	bne.n	8000698 <MCAL_GPIO_Init+0x13c>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	431a      	orrs	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60da      	str	r2, [r3, #12]
}
 8000696:	e008      	b.n	80006aa <MCAL_GPIO_Init+0x14e>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	8812      	ldrh	r2, [r2, #0]
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	401a      	ands	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	60da      	str	r2, [r3, #12]
}
 80006a8:	e7ff      	b.n	80006aa <MCAL_GPIO_Init+0x14e>
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd90      	pop	{r4, r7, pc}

080006b2 <MCAL_GPIO_ReadPin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 				-The input port pin value.
 * Note					-none
 */
uint8_t  MCAL_GPIO_ReadPin		(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	460b      	mov	r3, r1
 80006bc:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if ((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	4013      	ands	r3, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 80006ca:	2301      	movs	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e001      	b.n	80006d4 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitstatus = GPIO_PIN_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <MCAL_GPIO_WritePin>:
 *
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin	(GPIO_TypeDef *GPIOx , uint16_t PinNumber, uint8_t Value)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	4613      	mov	r3, r2
 80006ee:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 80006f0:	787b      	ldrb	r3, [r7, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <MCAL_GPIO_WritePin+0x1e>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	611a      	str	r2, [r3, #16]

//		or
//		GPIOx->ODR &= ~(PinNumber) ;
	}

}
 80006fc:	e002      	b.n	8000704 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 80006fe:	887a      	ldrh	r2, [r7, #2]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	615a      	str	r2, [r3, #20]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
	...

08000710 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <EXTI0_IRQHandler+0x1c>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <EXTI0_IRQHandler+0x1c>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000720:	4b03      	ldr	r3, [pc, #12]	@ (8000730 <EXTI0_IRQHandler+0x20>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4798      	blx	r3
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40010400 	.word	0x40010400
 8000730:	20000024 	.word	0x20000024

08000734 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <EXTI1_IRQHandler+0x1c>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <EXTI1_IRQHandler+0x1c>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000744:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <EXTI1_IRQHandler+0x20>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4798      	blx	r3
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40010400 	.word	0x40010400
 8000754:	20000024 	.word	0x20000024

08000758 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <EXTI2_IRQHandler+0x1c>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <EXTI2_IRQHandler+0x1c>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000768:	4b03      	ldr	r3, [pc, #12]	@ (8000778 <EXTI2_IRQHandler+0x20>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4798      	blx	r3
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010400 	.word	0x40010400
 8000778:	20000024 	.word	0x20000024

0800077c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <EXTI3_IRQHandler+0x1c>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <EXTI3_IRQHandler+0x1c>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <EXTI3_IRQHandler+0x20>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	4798      	blx	r3
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010400 	.word	0x40010400
 800079c:	20000024 	.word	0x20000024

080007a0 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <EXTI4_IRQHandler+0x1c>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <EXTI4_IRQHandler+0x1c>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <EXTI4_IRQHandler+0x20>)
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	4798      	blx	r3
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010400 	.word	0x40010400
 80007c0:	20000024 	.word	0x20000024

080007c4 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 80007c8:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	f003 0320 	and.w	r3, r3, #32
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d008      	beq.n	80007e6 <EXTI9_5_IRQHandler+0x22>
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6153      	str	r3, [r2, #20]
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <EXTI9_5_IRQHandler+0xa4>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d008      	beq.n	8000804 <EXTI9_5_IRQHandler+0x40>
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <EXTI9_5_IRQHandler+0xa4>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000804:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080c:	2b00      	cmp	r3, #0
 800080e:	d008      	beq.n	8000822 <EXTI9_5_IRQHandler+0x5e>
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a13      	ldr	r2, [pc, #76]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081a:	6153      	str	r3, [r2, #20]
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <EXTI9_5_IRQHandler+0xa4>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800082a:	2b00      	cmp	r3, #0
 800082c:	d008      	beq.n	8000840 <EXTI9_5_IRQHandler+0x7c>
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <EXTI9_5_IRQHandler+0xa4>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000848:	2b00      	cmp	r3, #0
 800084a:	d008      	beq.n	800085e <EXTI9_5_IRQHandler+0x9a>
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <EXTI9_5_IRQHandler+0xa0>)
 8000852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000856:	6153      	str	r3, [r2, #20]
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <EXTI9_5_IRQHandler+0xa4>)
 800085a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800085c:	4798      	blx	r3

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010400 	.word	0x40010400
 8000868:	20000024 	.word	0x20000024

0800086c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000870:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <EXTI15_10_IRQHandler+0x22>
 800087c:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4a29      	ldr	r2, [pc, #164]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000886:	6153      	str	r3, [r2, #20]
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <EXTI15_10_IRQHandler+0xc0>)
 800088a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800088c:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000896:	2b00      	cmp	r3, #0
 8000898:	d008      	beq.n	80008ac <EXTI15_10_IRQHandler+0x40>
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a22      	ldr	r2, [pc, #136]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <EXTI15_10_IRQHandler+0xc0>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008aa:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d008      	beq.n	80008ca <EXTI15_10_IRQHandler+0x5e>
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008c2:	6153      	str	r3, [r2, #20]
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <EXTI15_10_IRQHandler+0xc0>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c8:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80008ca:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <EXTI15_10_IRQHandler+0x7c>
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <EXTI15_10_IRQHandler+0xc0>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008e6:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d008      	beq.n	8000906 <EXTI15_10_IRQHandler+0x9a>
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fe:	6153      	str	r3, [r2, #20]
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <EXTI15_10_IRQHandler+0xc0>)
 8000902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000904:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d008      	beq.n	8000924 <EXTI15_10_IRQHandler+0xb8>
 8000912:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <EXTI15_10_IRQHandler+0xbc>)
 8000918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b03      	ldr	r3, [pc, #12]	@ (800092c <EXTI15_10_IRQHandler+0xc0>)
 8000920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000922:	4798      	blx	r3

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40010400 	.word	0x40010400
 800092c:	20000024 	.word	0x20000024

08000930 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000946:	4b37      	ldr	r3, [pc, #220]	@ (8000a24 <I2C1_EV_IRQHandler+0xe8>)
 8000948:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000952:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800095c:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00a      	beq.n	8000984 <I2C1_EV_IRQHandler+0x48>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d007      	beq.n	8000984 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 800097c:	2100      	movs	r1, #0
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f000 f852 	bl	8000a28 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d012      	beq.n	80009ba <I2C1_EV_IRQHandler+0x7e>
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00f      	beq.n	80009ba <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d109      	bne.n	80009ba <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80009b2:	2102      	movs	r1, #2
 80009b4:	6978      	ldr	r0, [r7, #20]
 80009b6:	f000 f837 	bl	8000a28 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c2:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00f      	beq.n	80009ea <I2C1_EV_IRQHandler+0xae>
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <I2C1_EV_IRQHandler+0xae>
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d009      	beq.n	80009ea <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 80009e2:	2103      	movs	r1, #3
 80009e4:	6978      	ldr	r0, [r7, #20]
 80009e6:	f000 f81f 	bl	8000a28 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f2:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00f      	beq.n	8000a1a <I2C1_EV_IRQHandler+0xde>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00c      	beq.n	8000a1a <I2C1_EV_IRQHandler+0xde>
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d009      	beq.n	8000a1a <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000a12:	2104      	movs	r1, #4
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f000 f807 	bl	8000a28 <Slave_States>
			}
		}



}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40005400 	.word	0x40005400

08000a28 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <Slave_States+0xd8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	d856      	bhi.n	8000af8 <Slave_States+0xd0>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <Slave_States+0x28>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a6b 	.word	0x08000a6b
 8000a54:	08000a65 	.word	0x08000a65
 8000a58:	08000a8f 	.word	0x08000a8f
 8000a5c:	08000aa7 	.word	0x08000aa7
 8000a60:	08000acb 	.word	0x08000acb
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000a68:	e046      	b.n	8000af8 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d03b      	beq.n	8000aee <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000a76:	7bfa      	ldrb	r2, [r7, #15]
 8000a78:	4922      	ldr	r1, [pc, #136]	@ (8000b04 <Slave_States+0xdc>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	3320      	adds	r3, #32
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2000      	movs	r0, #0
 8000a8a:	4798      	blx	r3
		}

		break ;
 8000a8c:	e02f      	b.n	8000aee <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	491c      	ldr	r1, [pc, #112]	@ (8000b04 <Slave_States+0xdc>)
 8000a92:	4613      	mov	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	4413      	add	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	3320      	adds	r3, #32
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	4798      	blx	r3

		break ;
 8000aa4:	e028      	b.n	8000af8 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d01f      	beq.n	8000af2 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000ab2:	7bfa      	ldrb	r2, [r7, #15]
 8000ab4:	4913      	ldr	r1, [pc, #76]	@ (8000b04 <Slave_States+0xdc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	3320      	adds	r3, #32
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	4798      	blx	r3
		}

		break ;
 8000ac8:	e013      	b.n	8000af2 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10f      	bne.n	8000af6 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000ad6:	7bfa      	ldrb	r2, [r7, #15]
 8000ad8:	490a      	ldr	r1, [pc, #40]	@ (8000b04 <Slave_States+0xdc>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3320      	adds	r3, #32
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2004      	movs	r0, #4
 8000aea:	4798      	blx	r3
		}

		break ;
 8000aec:	e003      	b.n	8000af6 <Slave_States+0xce>
		break ;
 8000aee:	bf00      	nop
 8000af0:	e002      	b.n	8000af8 <Slave_States+0xd0>
		break ;
 8000af2:	bf00      	nop
 8000af4:	e000      	b.n	8000af8 <Slave_States+0xd0>
		break ;
 8000af6:	bf00      	nop
	}
	}

}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40005400 	.word	0x40005400
 8000b04:	20000060 	.word	0x20000060

08000b08 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <SPI1_IRQHandler>:
 * 							Generic Functions
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <SPI1_IRQHandler+0x54>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	f362 0300 	bfi	r3, r2, #0, #1
 8000b38:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <SPI1_IRQHandler+0x54>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	793b      	ldrb	r3, [r7, #4]
 8000b46:	f362 0341 	bfi	r3, r2, #1, #1
 8000b4a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <SPI1_IRQHandler+0x54>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	793b      	ldrb	r3, [r7, #4]
 8000b5a:	f362 0382 	bfi	r3, r2, #2, #1
 8000b5e:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SPI1_IRQHandler+0x58>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	7938      	ldrb	r0, [r7, #4]
 8000b68:	4798      	blx	r3

}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40013000 	.word	0x40013000
 8000b78:	200000a8 	.word	0x200000a8

08000b7c <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <SPI2_IRQHandler+0x54>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	085b      	lsrs	r3, r3, #1
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	793b      	ldrb	r3, [r7, #4]
 8000b90:	f362 0300 	bfi	r3, r2, #0, #1
 8000b94:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <SPI2_IRQHandler+0x54>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	793b      	ldrb	r3, [r7, #4]
 8000ba2:	f362 0341 	bfi	r3, r2, #1, #1
 8000ba6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <SPI2_IRQHandler+0x54>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	793b      	ldrb	r3, [r7, #4]
 8000bb6:	f362 0382 	bfi	r3, r2, #2, #1
 8000bba:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <SPI2_IRQHandler+0x58>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	7938      	ldrb	r0, [r7, #4]
 8000bc4:	4798      	blx	r3
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40003800 	.word	0x40003800
 8000bd4:	200000a8 	.word	0x200000a8

08000bd8 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	@ (8000be8 <USART1_IRQHandler+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4798      	blx	r3

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000b0 	.word	0x200000b0

08000bec <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	@ (8000bfc <USART2_IRQHandler+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	4798      	blx	r3

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000b0 	.word	0x200000b0

08000c00 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000c04:	4b02      	ldr	r3, [pc, #8]	@ (8000c10 <USART3_IRQHandler+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	4798      	blx	r3


}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000b0 	.word	0x200000b0

08000c14 <__libc_init_array>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	2600      	movs	r6, #0
 8000c18:	4d0c      	ldr	r5, [pc, #48]	@ (8000c4c <__libc_init_array+0x38>)
 8000c1a:	4c0d      	ldr	r4, [pc, #52]	@ (8000c50 <__libc_init_array+0x3c>)
 8000c1c:	1b64      	subs	r4, r4, r5
 8000c1e:	10a4      	asrs	r4, r4, #2
 8000c20:	42a6      	cmp	r6, r4
 8000c22:	d109      	bne.n	8000c38 <__libc_init_array+0x24>
 8000c24:	f000 f81a 	bl	8000c5c <_init>
 8000c28:	2600      	movs	r6, #0
 8000c2a:	4d0a      	ldr	r5, [pc, #40]	@ (8000c54 <__libc_init_array+0x40>)
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <__libc_init_array+0x44>)
 8000c2e:	1b64      	subs	r4, r4, r5
 8000c30:	10a4      	asrs	r4, r4, #2
 8000c32:	42a6      	cmp	r6, r4
 8000c34:	d105      	bne.n	8000c42 <__libc_init_array+0x2e>
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
 8000c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c3c:	4798      	blx	r3
 8000c3e:	3601      	adds	r6, #1
 8000c40:	e7ee      	b.n	8000c20 <__libc_init_array+0xc>
 8000c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c46:	4798      	blx	r3
 8000c48:	3601      	adds	r6, #1
 8000c4a:	e7f2      	b.n	8000c32 <__libc_init_array+0x1e>
 8000c4c:	08000c7c 	.word	0x08000c7c
 8000c50:	08000c7c 	.word	0x08000c7c
 8000c54:	08000c7c 	.word	0x08000c7c
 8000c58:	08000c80 	.word	0x08000c80

08000c5c <_init>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	bf00      	nop
 8000c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c62:	bc08      	pop	{r3}
 8000c64:	469e      	mov	lr, r3
 8000c66:	4770      	bx	lr

08000c68 <_fini>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr
